{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-ada.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","AdaHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","inherits","TextMode","Mode","Range","HighlightRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","line","tab","indent","$getIndent","tokens","getTokenizer","getLineTokens","length","type","match","checkOutdent","input","autoOutdent","session","row","getLine","prevLine","prevIndent","outdentRows","$id","call","prototype","m"],"mappings":"0FAAAA,gBAAIC,OAAO,+BAA+B,CAAC,UAAU,UAAU,SAAS,cAAc,kCAAkC,SAASC,EAASC,EAASC,GACnJ,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAqBJ,EAAQ,0BAA0BI,mBAEvDC,EAAoB,WACxB,IAcQC,EAAgBC,KAAKC,oBAAoB,CACzC,mBAJA,+CAKA,QAhBO,wcAiBP,oBAVA,mBAWD,cAAc,GAEjBD,KAAKE,OAAS,CACV,MAAU,CAAE,CACRC,MAAQ,UACRC,MAAQ,SACT,CACCD,MAAQ,SACRC,MAAQ,SACT,CACCD,MAAQ,SACRC,MAAQ,OACT,CACCD,MAAQ,mBACRC,MAAQ,mDACT,CACCD,MAAQJ,EACRK,MAAQ,+BACT,CACCD,MAAQ,mBACRC,MAAQ,+DACT,CACCD,MAAQ,eACRC,MAAQ,SACT,CACCD,MAAQ,eACRC,MAAQ,SACT,CACCD,MAAQ,OACRC,MAAQ,WAKpBR,EAAIS,SAASP,EAAmBD,GAEhCH,EAAQI,kBAAoBA,KAG5BP,IAAIC,OAAO,eAAe,CAAC,UAAU,UAAU,SAAS,cAAc,gBAAgB,+BAA+B,cAAc,SAASC,EAASC,EAASC,GAC9J,aAEA,IAAIC,EAAMH,EAAQ,cACda,EAAWb,EAAQ,UAAUc,KAC7BT,EAAoBL,EAAQ,yBAAyBK,kBACrDU,EAAQf,EAAQ,YAAYe,MAE5BD,EAAO,WACPP,KAAKS,eAAiBX,EACtBE,KAAKU,WAAaV,KAAKW,mBAE3Bf,EAAIS,SAASE,EAAMD,GAEnB,WAEIN,KAAKY,iBAAmB,KAExBZ,KAAKa,kBAAoB,SAASC,EAAOC,EAAMC,GAC3C,IAAIC,EAASjB,KAAKkB,WAAWH,GAGzBI,EADgBnB,KAAKoB,eAAeC,cAAcN,EAAMD,GACjCK,OAE3B,GAAIA,EAAOG,QAA0C,WAAhCH,EAAOA,EAAOG,OAAO,GAAGC,KACzC,OAAON,EAEE,SAATH,IACYC,EAAKS,MAAM,oCAEnBP,GAAUD,IAIlB,OAAOC,GAGXjB,KAAKyB,aAAe,SAASX,EAAOC,EAAMW,GAEtC,SADoBX,EAAOW,GACTF,MAAM,qBAO5BxB,KAAK2B,YAAc,SAASb,EAAOc,EAASC,GAExC,IAAId,EAAOa,EAAQE,QAAQD,GACvBE,EAAWH,EAAQE,QAAQD,EAAM,GACjCG,EAAahC,KAAKkB,WAAWa,GAAUT,OAC9BtB,KAAKkB,WAAWH,GAAMO,QACrBU,GAIdJ,EAAQK,YAAY,IAAIzB,EAAMqB,EAAK,EAAGA,EAAM,EAAG,KAInD7B,KAAKkC,IAAM,gBACZC,KAAK5B,EAAK6B,WAEb1C,EAAQa,KAAOA,KAGKhB,IAAIE,QAAQ,CAAC,iBAAiB,SAAS4C,GAC4B1C,IAC3DA,EAAOD,QAAU2C,Q","file":"static/js/3.d875d8d6.chunk.js","sourcesContent":["ace.define(\"ace/mode/ada_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar AdaHighlightRules = function() {\nvar keywords = \"abort|else|new|return|abs|elsif|not|reverse|abstract|end|null|accept|entry|select|\" +\n\"access|exception|of|separate|aliased|exit|or|some|all|others|subtype|and|for|out|synchronized|\" +\n\"array|function|overriding|at|tagged|generic|package|task|begin|goto|pragma|terminate|\" +\n\"body|private|then|if|procedure|type|case|in|protected|constant|interface|until|\" +\n\"|is|raise|use|declare|range|delay|limited|record|when|delta|loop|rem|while|digits|renames|with|do|mod|requeue|xor\";\n\n    var builtinConstants = (\n        \"true|false|null\"\n    );\n\n    var builtinFunctions = (\n        \"count|min|max|avg|sum|rank|now|coalesce|main\"\n    );\n\n    var keywordMapper = this.createKeywordMapper({\n        \"support.function\": builtinFunctions,\n        \"keyword\": keywords,\n        \"constant.language\": builtinConstants\n    }, \"identifier\", true);\n\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment\",\n            regex : \"--.*$\"\n        }, {\n            token : \"string\",           // \" string\n            regex : '\".*?\"'\n        }, {\n            token : \"string\",           // character\n            regex : \"'.'\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\/|\\\\/\\\\/|%|<@>|@>|<@|&|\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\(]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\)]\"\n        }, {\n            token : \"text\",\n            regex : \"\\\\s+\"\n        } ]\n    };\n};\n\noop.inherits(AdaHighlightRules, TextHighlightRules);\n\nexports.AdaHighlightRules = AdaHighlightRules;\n});\n\nace.define(\"ace/mode/ada\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/ada_highlight_rules\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar AdaHighlightRules = require(\"./ada_highlight_rules\").AdaHighlightRules;\nvar Range = require(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = AdaHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"--\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*(begin|loop|then|is|do)\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        var complete_line = line + input;\n        if (complete_line.match(/^\\s*(begin|end)$/)) {\n            return true;\n        }\n\n        return false;\n    };\n\n    this.autoOutdent = function(state, session, row) {\n\n        var line = session.getLine(row);\n        var prevLine = session.getLine(row - 1);\n        var prevIndent = this.$getIndent(prevLine).length;\n        var indent = this.$getIndent(line).length;\n        if (indent <= prevIndent) {\n            return;\n        }\n\n        session.outdentRows(new Range(row, 0, row + 2, 0));\n    };\n\n\n    this.$id = \"ace/mode/ada\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/ada\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}