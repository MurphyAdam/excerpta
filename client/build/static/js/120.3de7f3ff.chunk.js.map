{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-puppet.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","PuppetHighlightRules","this","$rules","token","regex","push","next","include","defaultToken","blockComment","normalizeRules","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","$id"],"mappings":"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","file":"static/js/120.3de7f3ff.chunk.js","sourcesContent":["ace.define(\"ace/mode/puppet_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar PuppetHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: ['keyword.type.puppet', 'constant.class.puppet', 'keyword.inherits.puppet', 'constant.class.puppet'],\n                regex: \"^\\\\s*(class)(\\\\s+(?:[-_A-Za-z0-9\\\".]+::)*[-_A-Za-z0-9\\\".]+\\\\s*)(?:(inherits\\\\s*)(\\\\s+(?:[-_A-Za-z0-9\\\".]+::)*[-_A-Za-z0-9\\\".]+\\\\s*))?\"\n            },\n            {\n                token: ['storage.function.puppet', 'name.function.puppet', 'punctuation.lpar'],\n                regex: \"(^\\\\s*define)(\\\\s+[a-zA-Z0-9_:]+\\\\s*)(\\\\()\",\n                push:\n                    [{\n                        token: 'punctuation.rpar.puppet',\n                        regex: \"\\\\)\",\n                        next: 'pop'\n                    },\n                        {include: \"constants\"},\n                        {include: \"variable\"},\n                        {include: \"strings\"},\n                        {include: \"operators\"},\n                        {defaultToken: 'string'}]\n            },\n            {\n                token: [\"language.support.class\", \"keyword.operator\"],\n                regex: \"\\\\b([a-zA-Z_]+)(\\\\s+=>)\"\n            },\n            {\n                token: [\"exported.resource.puppet\", \"keyword.name.resource.puppet\", \"paren.lparen\"],\n                regex: \"(\\\\@\\\\@)?(\\\\s*[a-zA-Z_]*)(\\\\s*\\\\{)\"\n            },\n            {\n                token: \"qualified.variable.puppet\",\n                regex: \"(\\\\$([a-z][a-z0-9_]*)?(::[a-z][a-z0-9_]*)*::[a-z0-9_][a-zA-Z0-9_]*)\"\n            },\n\n            {\n                token: \"singleline.comment.puppet\",\n                regex: '#(.)*$'\n            },\n            {\n                token: \"multiline.comment.begin.puppet\",\n                regex: '^\\\\s*\\\\/\\\\*',\n                push: \"blockComment\"\n            },\n            {\n                token: \"keyword.control.puppet\",\n                regex: \"\\\\b(case|if|unless|else|elsif|in|default:|and|or)\\\\s+(?!::)\"\n            },\n            {\n                token: \"keyword.control.puppet\",\n                regex: \"\\\\b(import|default|inherits|include|require|contain|node|application|consumes|environment|site|function|produces)\\\\b\"\n            },\n            {\n                token: \"support.function.puppet\",\n                regex: \"\\\\b(lest|str2bool|escape|gsub|Timestamp|Timespan|with|alert|crit|debug|notice|sprintf|split|step|strftime|slice|shellquote|type|sha1|defined|scanf|reverse_each|regsubst|return|emerg|reduce|err|failed|fail|versioncmp|file|generate|then|info|realize|search|tag|tagged|template|epp|warning|hiera_include|each|assert_type|binary_file|create_resources|dig|digest|filter|lookup|find_file|fqdn_rand|hiera_array|hiera_hash|inline_epp|inline_template|map|match|md5|new|next)\\\\b\"\n            },\n            {\n                token: \"constant.types.puppet\",\n                regex: \"\\\\b(String|File|Package|Service|Class|Integer|Array|Catalogentry|Variant|Boolean|Undef|Number|Hash|Float|Numeric|NotUndef|Callable|Optional|Any|Regexp|Sensitive|Sensitive.new|Type|Resource|Default|Enum|Scalar|Collection|Data|Pattern|Tuple|Struct)\\\\b\"\n            },\n\n            {\n                token: \"paren.lparen\",\n                regex: \"[[({]\"\n            },\n            {\n                token: \"paren.rparen\",\n                regex: \"[\\\\])}]\"\n            },\n            {include: \"variable\"},\n            {include: \"constants\"},\n            {include: \"strings\"},\n            {include: \"operators\"},\n            {\n                token: \"regexp.begin.string.puppet\",\n                regex: \"\\\\s*(\\\\/(\\\\S)+)\\\\/\"\n            }\n        ],\n        blockComment: [{\n            regex: \"\\\\*\\\\/\",\n            token: \"multiline.comment.end.puppet\",\n            next: \"pop\"\n        }, {\n            defaultToken: \"comment\"\n        }],\n        \"constants\": [\n            {\n                token: \"constant.language.puppet\",\n                regex: \"\\\\b(false|true|running|stopped|installed|purged|latest|file|directory|held|undef|present|absent|link|mounted|unmounted)\\\\b\"\n            }\n        ],\n        \"variable\": [\n            {\n                token: \"variable.puppet\",\n                regex: \"(\\\\$[a-z0-9_\\{][a-zA-Z0-9_]*)\"\n            }\n        ],\n        \"strings\": [\n            {\n                token: \"punctuation.quote.puppet\",\n                regex: \"'\",\n                push:\n                    [{\n                        token: 'punctuation.quote.puppet',\n                        regex: \"'\",\n                        next: 'pop'\n                    },\n                        {include: \"escaped_chars\"},\n                        {defaultToken: 'string'}]\n            },\n            {\n                token: \"punctuation.quote.puppet\",\n                regex: '\"',\n                push:\n                    [{\n                        token: 'punctuation.quote.puppet',\n                        regex: '\"',\n                        next: 'pop'\n                    },\n                        {include: \"escaped_chars\"},\n                        {include: \"variable\"},\n                        {defaultToken: 'string'}]\n            }\n        ],\n        \"escaped_chars\": [\n            {\n                token: \"constant.escaped_char.puppet\",\n                regex: \"\\\\\\\\.\"\n            }\n        ],\n        \"operators\": [\n            {\n                token: \"keyword.operator\",\n                regex: \"\\\\+\\\\.|\\\\-\\\\.|\\\\*\\\\.|\\\\/\\\\.|#|;;|\\\\+|\\\\-|\\\\*|\\\\*\\\\*\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|<-|=|::|,\"\n            }\n        ]\n    };\n    this.normalizeRules();\n};\n\n\noop.inherits(PuppetHighlightRules, TextHighlightRules);\n\nexports.PuppetHighlightRules = PuppetHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/puppet\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/puppet_highlight_rules\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\",\"ace/mode/matching_brace_outdent\"], function (require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PuppetHighlightRules = require(\"./puppet_highlight_rules\").PuppetHighlightRules;\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\nvar Mode = function () {\n    TextMode.call(this);\n    this.HighlightRules = PuppetHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n};\n\noop.inherits(Mode, TextMode);\n\n\n(function () {\n    this.lineCommentStart = \"#\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    \n    this.$id = \"ace/mode/puppet\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/puppet\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}