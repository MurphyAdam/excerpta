{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-graphqlschema.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","GraphQLSchemaHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","next","normalizeRules","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","lineCommentStart","$id","snippetFileId"],"mappings":"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","file":"static/js/53.c920a5b4.chunk.js","sourcesContent":["ace.define(\"ace/mode/graphqlschema_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar GraphQLSchemaHighlightRules = function() {\n\n    var keywords = (\n      \"type|interface|union|enum|schema|input|implements|extends|scalar\"\n    );\n\n    var dataTypes = (\n      \"Int|Float|String|ID|Boolean\"\n    );\n\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"storage.type\": dataTypes\n    }, \"identifier\");\n\n    this.$rules = {\n      \"start\" : [ {\n        token : \"comment\",\n        regex : \"#.*$\"\n      }, {\n        token : \"paren.lparen\",\n        regex : /[\\[({]/,\n        next  : \"start\"\n      }, {\n        token : \"paren.rparen\",\n        regex : /[\\])}]/\n      }, {\n        token : keywordMapper,\n        regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      } ]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(GraphQLSchemaHighlightRules, TextHighlightRules);\n\nexports.GraphQLSchemaHighlightRules = GraphQLSchemaHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/graphqlschema\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/graphqlschema_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar GraphQLSchemaHighlightRules = require(\"./graphqlschema_highlight_rules\").GraphQLSchemaHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = GraphQLSchemaHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/graphqlschema\";\n    this.snippetFileId = \"ace/snippets/graphqlschema\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/graphqlschema\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}