{"version":3,"sources":["constants.js","components/Snippet/AddSnippet.jsx"],"names":["snippetColors","useStyles","makeStyles","theme","root","margin","spacing","width","shape","height","shapeCircle","borderRadius","colors","card","display","flexDirection","cardColor","color","palette","common","white","AddSnippet","props","setDisplayAddSnippetComponent","dispatch","useDispatch","classes","console","log","useState","title","body","tags","snippet","setSnippet","isLoading","setIsLoading","handleSubmit","event","a","preventDefault","createSnippetService","response","addSnippet","data","notificationError","message","request","statusText","notificationTemplate","renderArray","errors","handleFieldChange","target","name","value","Circle","className","clsx","style","background","onClick","handleColorChange","Card","noValidate","autoComplete","TextField","id","label","multiline","rowsMax","onChange","variant","Breadcrumbs","separator","map","CardActions","IconButton","disabled"],"mappings":"2SACMA,EAAgB,CACrB,uBACA,wBACA,uBACA,uBACA,YACA,wBACA,YACC,yBCSIC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,uBAAwB,CACtBC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,SAGXC,MAAO,CACLD,MAAO,GACPE,OAAQ,IAEVC,YAAa,CACXC,aAAc,OAEhBC,OAAQ,CACPP,OAAQF,EAAMG,QAAQ,GACtB,QAAS,CACND,OAAQF,EAAMG,QAAQ,KAG1BO,KAAM,CACJC,QAAS,OACTC,cAAe,UAEjBC,UAAW,CACTC,MAAOd,EAAMe,QAAQC,OAAOC,WAqHjBC,UAjHf,SAAoBC,GAAQ,IAElBC,EAFiB,eAEqBD,GAAtCC,8BACFC,EAAWC,wBACXC,EAAUzB,IAChB0B,QAAQC,IAAIF,EAAQV,UAAUC,OALL,MAMKY,mBAC5B,CACEC,MAAO,KACPC,KAAM,KACNd,MAAO,uBACPe,KAAM,OAXe,mBAMlBC,EANkB,KAMTC,EANS,OAaSL,oBAAS,GAblB,mBAalBM,EAbkB,KAaPC,EAbO,KAenBC,EAAY,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DACnBD,EAAME,iBACNJ,GAAa,GAFM,kBAKMK,YAAqBR,GAL3B,OAKXS,EALW,OAQjBnB,GAA8B,GAG9BC,EAASmB,YAAWD,EAASE,KAAKX,UAXjB,kDAcfT,EAASqB,gBAAkB,CAAC,MAAS,KAAMH,SAASE,KAAKE,SACvD,KAAMC,QAAQC,WACd,YAAe,EACf,QAAU,wBACV,SAAYC,IAAqBC,YAArB,UAAiC,KAAMR,gBAAvC,iBAAiC,EAAgBE,YAAjD,aAAiC,EAAsBO,WAlBtD,QAqBnBf,GAAa,GArBM,0DAAH,sDA4BZgB,EAAoB,SAAAd,GAAU,IAAD,EACTA,EAAMe,OAAtBC,EADyB,EACzBA,KAAMC,EADmB,EACnBA,MACdrB,GAAW,SAAAD,GAAO,kCAAUA,GAAV,kBAAoBqB,EAAOC,QAGzCC,EAAS,SAAClC,GAAW,IAClBL,EADiB,eACHK,GAAdL,MACR,OACC,yBAAKwC,UAAWC,YAAKhC,EAAQlB,MAAOkB,EAAQhB,aAC1C4C,KAAK,QACNK,MAAO,CAACC,WAAY3C,GAAgB,MACpC4C,QAAS,kBAfc,SAAA5C,GACxBiB,GAAW,SAAAD,GAAO,kCAAUA,GAAV,IAAmBhB,MAAOA,OAc5B6C,CAAkB7C,OAItC,OACC,kBAAC8C,EAAA,EAAD,CAAMN,UAAW/B,EAAQb,KAAM8C,MAAO,CAACC,WAAY3B,EAAQhB,MAAQgB,EAAQhB,MAAQ,OAChF,0BAAMwC,UAAW/B,EAAQtB,KAAM4D,YAAU,EAACC,aAAa,OACrD,6BACE,kBAACC,EAAA,EAAD,CACEC,GAAG,0BACHC,MAAM,QACNd,KAAK,QACLe,WAAS,EACTC,QAAS,EACTf,MAAOtB,EAAQH,MACfyC,SAAUnB,EACVoB,QAAQ,WAEV,kBAACN,EAAA,EAAD,CACEC,GAAG,0BACHC,MAAM,OACNd,KAAK,OACLe,WAAS,EACTC,QAAS,GACTf,MAAOtB,EAAQF,KACfwC,SAAUnB,EACVoB,QAAQ,WAEV,kBAACN,EAAA,EAAD,CACEC,GAAG,0BACHC,MAAM,OACNd,KAAK,OACLe,WAAS,EACTC,QAAS,EACTf,MAAOtB,EAAQD,KACfuC,SAAUnB,EACVoB,QAAQ,WAEV,yBAAKf,UAAW/B,EAAQd,QAAxB,QAEC,kBAAC6D,EAAA,EAAD,CAAaC,UAAU,KACrB1E,EAAc2E,KAAI,SAAC1D,GAAD,OACjB,kBAACuC,EAAD,CAAQvC,MAAOA,WAOzB,kBAAC2D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYhB,QAASxB,EAAcyC,SAAU3C,GAC3C,kBAAC,IAAD","file":"static/js/4.fa8811fc.chunk.js","sourcesContent":["\nconst snippetColors = [\n\t\"rgb(76 175 80 / 22%)\",\n\t\"rgb(156 39 176 / 33%)\",\n\t\"rgb(233 30 99 / 53%)\",\n\t\"rgb(0 150 136 / 35%)\",\n\t\"#ff572275\",\n\t\"rgb(33 150 243 / 34%)\",\n\t\"#ffeb3b4d\",\n  \"rgb(103 58 183 / 45%)\"\n];\n\nexport { snippetColors };","import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { createSnippetService } from '../../services/snippets-api';\n\nimport { useDispatch } from 'react-redux';\nimport { error as notificationError } from 'react-notification-system-redux';\nimport { notificationTemplate } from '../../redux/methods';\nimport { setSnippet as addSnippet } from '../../redux/actions/snippets';\nimport { snippetColors } from '../../constants';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '95% ',\n    },\n  },\n  shape: {\n    width: 30,\n    height: 30,\n  },\n  shapeCircle: {\n    borderRadius: '25%',\n  },\n  colors: {\n  \tmargin: theme.spacing(1),\n  \t'& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardColor: {\n    color: theme.palette.common.white,\n  }\n}));\n\nfunction AddSnippet(props) {\n\n  const { setDisplayAddSnippetComponent } = {...props};\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  console.log(classes.cardColor.color);\n  const [snippet, setSnippet] = useState(\n    {\n      title: null, \n      body: null, \n      color: \"rgb(76 175 80 / 22%)\", \n      tags: null\n    });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    try {\n      // Api Call To Create Snippet\n      const response = await createSnippetService(snippet);\n      // The Request Was Fulffiled And The Snippet Was Created\n      // So Let's Hide The AddSnippet Component\n      setDisplayAddSnippetComponent(false);\n      // the response returns the created snippet\n      // we add it to our snippets\n      dispatch(addSnippet(response.data.snippet));\n    } catch (error) {\n        // display notification for error\n        dispatch(notificationError({'title': error.response.data.message || \n          error.request.statusText,\n          'autoDismiss': 0,\n          'message': `Failed to add snippet`,\n          'children': notificationTemplate.renderArray(error.response?.data?.errors),\n        }));\n    }\n    setIsLoading(false);\n  }\n\n  const handleColorChange = color => {\n    setSnippet(snippet => ({ ...snippet, color: color }));\n  };\n\n  const handleFieldChange = event => {\n    const { name, value } = event.target;\n    setSnippet(snippet => ({ ...snippet, [name]: value }));\n\t}\n\n  const Circle = (props) => {\n  \tconst { color } = {...props}\n  \treturn (\n  \t\t<div className={clsx(classes.shape, classes.shapeCircle)} \n  \t\t\t\tname=\"color\"\n\t\t\t\t\tstyle={{background: color ? color : null}} \n\t\t\t\t\tonClick={() => handleColorChange(color)} />\n\t\t\t);\n  }\n\nreturn (\n\t<Card className={classes.card} style={{background: snippet.color ? snippet.color : null}}>\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      <div>\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Title\"\n          name=\"title\"\n          multiline\n          rowsMax={2}\n          value={snippet.title}\n          onChange={handleFieldChange}\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Body\"\n          name=\"body\"\n          multiline\n          rowsMax={10}\n          value={snippet.body}\n          onChange={handleFieldChange}\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Tags\"\n          name=\"tags\"\n          multiline\n          rowsMax={2}\n          value={snippet.tags}\n          onChange={handleFieldChange}\n          variant=\"filled\"\n        />\n        <div className={classes.colors}>\n\t        Color\n\t        <Breadcrumbs separator=\" \">\n\t\t        {snippetColors.map((color) => (\n\t\t        \t\t<Circle color={color} />\n\t\t        \t))\n\t\t        }\n\t        </Breadcrumbs>\n\t      </div>\n      </div>\n    </form>\n\t\t<CardActions>\n      <IconButton onClick={handleSubmit} disabled={isLoading}>\n        <DoneIcon />\n      </IconButton>\n\t\t</CardActions>\n  </Card>\n  );\n}\n\n\nexport default AddSnippet;"],"sourceRoot":""}