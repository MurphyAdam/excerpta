{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-tcl.js"],"names":["ace","define","require","exports","module","oop","Range","BaseFoldMode","FoldMode","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextHighlightRules","TclHighlightRules","$rules","token","regex","next","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","Mode","CStyleFoldMode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","tab","tokens","getTokenizer","getLineTokens","type","$id","snippetFileId"],"mappings":"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","file":"static/js/150.68f77ed9.chunk.js","sourcesContent":["ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/tcl_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar TclHighlightRules = function() {\n\n    this.$rules = {\n        \"start\" : [\n           {\n                token : \"comment\",\n                regex : \"#.*\\\\\\\\$\",\n                next  : \"commentfollow\"\n            }, {\n                token : \"comment\",\n                regex : \"#.*$\"\n            }, {\n                token : \"support.function\",\n                regex : '[\\\\\\\\]$',\n                next  : \"splitlineStart\"\n            }, {\n                token : \"text\",\n                regex : /\\\\(?:[\"{}\\[\\]$\\\\])/\n            }, {\n                token : \"text\", // last value before command\n                regex : '^|[^{][;][^}]|[/\\r/]',\n                next  : \"commandItem\"\n            }, {\n                token : \"string\", // single line\n                regex : '[ ]*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"string\", // multi line \"\"\" string start\n                regex : '[ ]*[\"]',\n                next  : \"qqstring\"\n            }, {\n                token : \"variable.instance\",\n                regex : \"[$]\",\n                next  : \"variable\"\n            }, {\n                token : \"support.function\",\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|{\\\\*}|;|::\"\n            }, {\n                token : \"identifier\",\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[{]\",\n                next  : \"commandItem\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[(]\"\n            },  {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"commandItem\" : [\n            {\n                token : \"comment\",\n                regex : \"#.*\\\\\\\\$\",\n                next  : \"commentfollow\"\n            }, {\n                token : \"comment\",\n                regex : \"#.*$\",\n                next  : \"start\"\n            }, {\n                token : \"string\", // single line\n                regex : '[ ]*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"variable.instance\", \n                regex : \"[$]\",\n                next  : \"variable\"\n            }, {\n                token : \"support.function\",\n                regex : \"(?:[:][:])[a-zA-Z0-9_/]+(?:[:][:])\",\n                next  : \"commandItem\"\n            }, {\n                token : \"support.function\",\n                regex : \"[a-zA-Z0-9_/]+(?:[:][:])\",\n                next  : \"commandItem\"\n            }, {\n                token : \"support.function\",\n                regex : \"(?:[:][:])\",\n                next  : \"commandItem\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"support.function\",\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|{\\\\*}|;|::\"\n            }, {\n                token : \"keyword\",\n                regex : \"[a-zA-Z0-9_/]+\",\n                next  : \"start\"\n            } ],\n        \"commentfollow\" : [ \n            {\n                token : \"comment\",\n                regex : \".*\\\\\\\\$\",\n                next  : \"commentfollow\"\n            }, {\n                token : \"comment\",\n                regex : '.+',\n                next  : \"start\"\n        } ],\n        \"splitlineStart\" : [ \n            {\n                token : \"text\",\n                regex : \"^.\",\n                next  : \"start\"\n            }],\n        \"variable\" : [ \n            {\n                token : \"variable.instance\", // variable tcl\n                regex : \"[a-zA-Z_\\\\d]+(?:[(][a-zA-Z_\\\\d]+[)])?\",\n                next  : \"start\"\n            }, {\n                token : \"variable.instance\", // variable tcl with braces\n                regex : \"{?[a-zA-Z_\\\\d]+}?\",\n                next  : \"start\"\n            }],  \n        \"qqstring\" : [ {\n            token : \"string\", // multi line \"\"\" string end\n            regex : '(?:[^\\\\\\\\]|\\\\\\\\.)*?[\"]',\n            next : \"start\"\n        }, {\n            token : \"string\",\n            regex : '.+'\n        } ]\n    };\n};\n\noop.inherits(TclHighlightRules, TextHighlightRules);\n\nexports.TclHighlightRules = TclHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/tcl\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/folding/cstyle\",\"ace/mode/tcl_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar TclHighlightRules = require(\"./tcl_highlight_rules\").TclHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Range = require(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = TclHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n        \n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/tcl\";\n    this.snippetFileId = \"ace/snippets/tcl\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/tcl\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}