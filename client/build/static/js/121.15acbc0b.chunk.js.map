{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-python.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","PythonHighlightRules","keywordMapper","this","createKeywordMapper","integer","pointFloat","floatNumber","stringEscape","$rules","token","regex","strPre","next","strRawPre","strFormatPre","strRawFormatPre","include","defaultToken","push","normalizeRules","inherits","BaseFoldMode","FoldMode","markers","foldingStartMarker","RegExp","getFoldWidgetRange","session","foldStyle","row","match","getLine","openingBracketBlock","index","indentationBlock","length","call","prototype","TextMode","Mode","PythonFoldMode","Range","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","line","tab","indent","$getIndent","tokens","getTokenizer","getLineTokens","type","outdents","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","$id","snippetFileId","m"],"mappings":"4FAAAA,gBAAIC,OAAO,kCAAkC,CAAC,UAAU,UAAU,SAAS,cAAc,kCAAkC,SAASC,EAASC,EAASC,GACtJ,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAqBJ,EAAQ,0BAA0BI,mBAEvDC,EAAuB,WAEvB,IAqBIC,EAAgBC,KAAKC,oBAAoB,CACzC,qBAAsB,WACtB,mBAZA,kiBAaA,oBAAqB,WACrB,oBAlBA,oDAmBA,QAzBA,4LA0BD,cAUCC,EAAU,oFAKVC,EAAa,+CAEbC,EAAc,qFAA8BD,EAAa,IAEzDE,EAAe,kFAEnBL,KAAKM,OAAS,CACV,MAAU,CAAE,CACRC,MAAQ,UACRC,MAAQ,QACT,CACCD,MAAQ,SACRC,MAAQC,YACRC,KAAO,aACR,CACCH,MAAQ,SACRC,MAAQC,cACRC,KAAO,YACR,CACCH,MAAQ,SACRC,MAAQC,YACRC,KAAO,YACR,CACCH,MAAQ,SACRC,MAAQC,cACRC,KAAO,WACR,CACCH,MAAO,SACPC,MAAOG,WACPD,KAAM,gBACP,CACCH,MAAO,SACPC,MAAOG,aACPD,KAAM,eACP,CACCH,MAAO,SACPC,MAAOG,WACPD,KAAM,eACP,CACCH,MAAO,SACPC,MAAOG,aACPD,KAAM,cACP,CACCH,MAAO,SACPC,MAAOI,WACPF,KAAM,cACP,CACCH,MAAO,SACPC,MAAOI,aACPF,KAAM,aACP,CACCH,MAAO,SACPC,MAAOI,WACPF,KAAM,aACP,CACCH,MAAO,SACPC,MAAOI,aACPF,KAAM,YACR,CACEH,MAAO,SACPC,MAAOK,4BACPH,KAAM,eACP,CACCH,MAAO,SACPC,MAAOK,8BACPH,KAAM,cACP,CACCH,MAAO,SACPC,MAAOK,4BACPH,KAAM,cACP,CACCH,MAAO,SACPC,MAAOK,8BACPH,KAAM,aACP,CACCH,MAAO,mBACPC,MAAO,4EACR,CACCD,MAAO,cACPC,MAAO,2EACR,CACCD,MAAO,eACPC,MAAO,eACR,CACCD,MAAO,eACPC,MAAO,eACR,CACCD,MAAO,OACPC,MAAO,QACR,CACCM,QAAS,cAEb,UAAa,CAAC,CACVP,MAAO,2BACPC,MAAOH,GACR,CACCE,MAAO,SACPC,MAAO,OACPE,KAAM,SACP,CACCK,aAAc,WAElB,SAAY,CAAC,CACTR,MAAO,2BACPC,MAAOH,GACR,CACCE,MAAO,SACPC,MAAO,OACPE,KAAM,SACP,CACCK,aAAc,WAElB,SAAY,CAAC,CACTR,MAAO,2BACPC,MAAOH,GACR,CACCE,MAAO,SACPC,MAAO,QACPE,KAAM,YACP,CACCH,MAAO,SACPC,MAAO,MACPE,KAAM,SACP,CACCK,aAAc,WAElB,QAAW,CAAC,CACRR,MAAO,2BACPC,MAAOH,GACR,CACCE,MAAO,SACPC,MAAO,QACPE,KAAM,WACP,CACCH,MAAO,SACPC,MAAO,MACPE,KAAM,SACP,CACCK,aAAc,WAElB,aAAgB,CAAC,CACbR,MAAO,SACPC,MAAO,OACPE,KAAM,SACP,CACCK,aAAc,WAElB,YAAe,CAAC,CACZR,MAAO,SACPC,MAAO,OACPE,KAAM,SACP,CACCK,aAAc,WAElB,YAAe,CAAC,CACZR,MAAO,SACPC,MAAO,QACPE,KAAM,eACP,CACCH,MAAO,SACPC,MAAO,MACPE,KAAM,SACP,CACCK,aAAc,WAElB,WAAc,CAAC,CACXR,MAAO,SACPC,MAAO,QACPE,KAAM,cACP,CACCH,MAAO,SACPC,MAAO,MACPE,KAAM,SACP,CACCK,aAAc,WAElB,WAAc,CAAC,CACXR,MAAO,2BACPC,MAAOH,GACR,CACCE,MAAO,SACPC,MAAO,OACPE,KAAM,SACP,CACCH,MAAO,eACPC,MAAO,IACPQ,KAAM,oBACP,CACCD,aAAc,WAElB,UAAa,CAAC,CACVR,MAAO,2BACPC,MAAOH,GACR,CACCE,MAAO,SACPC,MAAO,OACPE,KAAM,SACP,CACCH,MAAO,eACPC,MAAO,IACPQ,KAAM,oBACP,CACCD,aAAc,WAElB,UAAa,CAAC,CACVR,MAAO,2BACPC,MAAOH,GACR,CACCE,MAAO,SACPC,MAAO,QACPE,KAAM,aACP,CACCH,MAAO,SACPC,MAAO,MACPE,KAAM,SACP,CACCH,MAAO,eACPC,MAAO,IACPQ,KAAM,oBACP,CACCD,aAAc,WAElB,SAAY,CAAC,CACTR,MAAO,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","file":"static/js/121.15acbc0b.chunk.js","sourcesContent":["ace.define(\"ace/mode/python_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PythonHighlightRules = function() {\n\n    var keywords = (\n        \"and|as|assert|break|class|continue|def|del|elif|else|except|exec|\" +\n        \"finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|\" +\n        \"raise|return|try|while|with|yield|async|await|nonlocal\"\n    );\n\n    var builtinConstants = (\n        \"True|False|None|NotImplemented|Ellipsis|__debug__\"\n    );\n\n    var builtinFunctions = (\n        \"abs|divmod|input|open|staticmethod|all|enumerate|int|ord|str|any|\" +\n        \"eval|isinstance|pow|sum|basestring|execfile|issubclass|print|super|\" +\n        \"binfile|bin|iter|property|tuple|bool|filter|len|range|type|bytearray|\" +\n        \"float|list|raw_input|unichr|callable|format|locals|reduce|unicode|\" +\n        \"chr|frozenset|long|reload|vars|classmethod|getattr|map|repr|xrange|\" +\n        \"cmp|globals|max|reversed|zip|compile|hasattr|memoryview|round|\" +\n        \"__import__|complex|hash|min|apply|delattr|help|next|setattr|set|\" +\n        \"buffer|dict|hex|object|slice|coerce|dir|id|oct|sorted|intern|\" +\n        \"ascii|breakpoint|bytes\"\n    );\n    var keywordMapper = this.createKeywordMapper({\n        \"invalid.deprecated\": \"debugger\",\n        \"support.function\": builtinFunctions,\n        \"variable.language\": \"self|cls\",\n        \"constant.language\": builtinConstants,\n        \"keyword\": keywords\n    }, \"identifier\");\n\n    var strPre = \"[uU]?\";\n    var strRawPre = \"[rR]\";\n    var strFormatPre = \"[fF]\";\n    var strRawFormatPre = \"(?:[rR][fF]|[fF][rR])\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment\",\n            regex : \"#.*$\"\n        }, {\n            token : \"string\",           // multi line \"\"\" string start\n            regex : strPre + '\"{3}',\n            next : \"qqstring3\"\n        }, {\n            token : \"string\",           // \" string\n            regex : strPre + '\"(?=.)',\n            next : \"qqstring\"\n        }, {\n            token : \"string\",           // multi line ''' string start\n            regex : strPre + \"'{3}\",\n            next : \"qstring3\"\n        }, {\n            token : \"string\",           // ' string\n            regex : strPre + \"'(?=.)\",\n            next : \"qstring\"\n        }, {\n            token: \"string\",\n            regex: strRawPre + '\"{3}',\n            next: \"rawqqstring3\"\n        }, {\n            token: \"string\", \n            regex: strRawPre + '\"(?=.)',\n            next: \"rawqqstring\"\n        }, {\n            token: \"string\",\n            regex: strRawPre + \"'{3}\",\n            next: \"rawqstring3\"\n        }, {\n            token: \"string\",\n            regex: strRawPre + \"'(?=.)\",\n            next: \"rawqstring\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + '\"{3}',\n            next: \"fqqstring3\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + '\"(?=.)',\n            next: \"fqqstring\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + \"'{3}\",\n            next: \"fqstring3\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + \"'(?=.)\",\n            next: \"fqstring\"\n        },{\n            token: \"string\",\n            regex: strRawFormatPre + '\"{3}',\n            next: \"rfqqstring3\"\n        }, {\n            token: \"string\",\n            regex: strRawFormatPre + '\"(?=.)',\n            next: \"rfqqstring\"\n        }, {\n            token: \"string\",\n            regex: strRawFormatPre + \"'{3}\",\n            next: \"rfqstring3\"\n        }, {\n            token: \"string\",\n            regex: strRawFormatPre + \"'(?=.)\",\n            next: \"rfqstring\"\n        }, {\n            token: \"keyword.operator\",\n            regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|@|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n        }, {\n            token: \"punctuation\",\n            regex: \",|:|;|\\\\->|\\\\+=|\\\\-=|\\\\*=|\\\\/=|\\\\/\\\\/=|%=|@=|&=|\\\\|=|^=|>>=|<<=|\\\\*\\\\*=\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"[\\\\[\\\\(\\\\{]\"\n        }, {\n            token: \"paren.rparen\",\n            regex: \"[\\\\]\\\\)\\\\}]\"\n        }, {\n            token: \"text\",\n            regex: \"\\\\s+\"\n        }, {\n            include: \"constants\"\n        }],\n        \"qqstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qqstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"qqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"qstring\"\n        }, {\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqqstring3\": [{\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqstring3\": [{\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqqstring\": [{\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"rawqqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqstring\": [{\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"rawqstring\"\n        }, {\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqqstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqqstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"fqqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqqstring3\": [{\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqstring3\": [{\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqqstring\": [{\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"rfqqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqstring\": [{\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqstringParRules\": [{//TODO: nested {}\n            token: \"paren.lparen\",\n            regex: \"[\\\\[\\\\(]\"\n        }, {\n            token: \"paren.rparen\",\n            regex: \"[\\\\]\\\\)]\"\n        }, {\n            token: \"string\",\n            regex: \"\\\\s+\"\n        }, {\n            token: \"string\",\n            regex: \"'[^']*'\"\n        }, {\n            token: \"string\",\n            regex: '\"[^\"]*\"'\n        }, {\n            token: \"function.support\",\n            regex: \"(!s|!r|!a)\"\n        }, {\n            include: \"constants\"\n        },{\n            token: 'paren.rparen',\n            regex: \"}\",\n            next: 'pop'\n        },{\n            token: 'paren.lparen',\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }],\n        \"constants\": [{\n            token: \"constant.numeric\", // imaginary\n            regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n        }, {\n            token: \"constant.numeric\", // float\n            regex: floatNumber\n        }, {\n            token: \"constant.numeric\", // long integer\n            regex: integer + \"[lL]\\\\b\"\n        }, {\n            token: \"constant.numeric\", // integer\n            regex: integer + \"\\\\b\"\n        }, {\n            token: [\"punctuation\", \"function.support\"],// method\n            regex: \"(\\\\.)([a-zA-Z_]+)\\\\b\"\n        }, {\n            token: keywordMapper,\n            regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(PythonHighlightRules, TextHighlightRules);\n\nexports.PythonHighlightRules = PythonHighlightRules;\n});\n\nace.define(\"ace/mode/folding/pythonic\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, match.index);\n            if (match[2])\n                return this.indentationBlock(session, row, match.index + match[2].length);\n            return this.indentationBlock(session, row);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/python\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/python_highlight_rules\",\"ace/mode/folding/pythonic\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PythonHighlightRules = require(\"./python_highlight_rules\").PythonHighlightRules;\nvar PythonFoldMode = require(\"./folding/pythonic\").FoldMode;\nvar Range = require(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = PythonHighlightRules;\n    this.foldingRules = new PythonFoldMode(\"\\\\:\");\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    var outdents = {\n        \"pass\": 1,\n        \"return\": 1,\n        \"raise\": 1,\n        \"break\": 1,\n        \"continue\": 1\n    };\n    \n    this.checkOutdent = function(state, line, input) {\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\n            return false;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n        \n        if (!tokens)\n            return false;\n        do {\n            var last = tokens.pop();\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\n        \n        if (!last)\n            return false;\n        \n        return (last.type == \"keyword\" && outdents[last.value]);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        \n        row += 1;\n        var indent = this.$getIndent(doc.getLine(row));\n        var tab = doc.getTabString();\n        if (indent.slice(-tab.length) == tab)\n            doc.remove(new Range(row, indent.length-tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/python\";\n    this.snippetFileId = \"ace/snippets/python\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/python\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}