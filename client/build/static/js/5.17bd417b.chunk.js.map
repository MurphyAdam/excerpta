{"version":3,"sources":["components/Snippet/ChangeTheme.jsx"],"names":["ChangeTheme","props","open","onOpen","onClose","editorPreferencesStateAction","editorPreferences","updateEditorPreferences","radioGroupRef","React","useRef","useState","theme","currentTheme","setCurrentTheme","fullWidth","maxWidth","aria-labelledby","id","dividers","ref","aria-label","name","value","onChange","event","target","themes","map","key","control","label","onClick","color"],"mappings":"0QAce,SAASA,EAAYC,GAAQ,IAClCC,EAAwDD,EAAxDC,KAAMC,EAAkDF,EAAlDE,OAAQC,EAA0CH,EAA1CG,QAASC,EAAiCJ,EAAjCI,6BACvBC,EAA+CD,EAA/CC,kBAAmBC,EAA4BF,EAA5BE,wBACrBC,EAAgBC,IAAMC,OAAO,MAHM,EAIDC,mBAASL,EAAkBM,OAJ1B,mBAIlCC,EAJkC,KAIpBC,EAJoB,KAYzC,OACI,kBAAC,IAAD,CACEC,WAAW,EACXC,SAAS,KACTd,KAAMA,EACNC,OAAQA,EACRC,QAASA,EACTa,kBAAgB,2BAChB,kBAAC,IAAD,CAAaC,GAAG,0BAAhB,gBACA,kBAAC,IAAD,CAAeC,UAAQ,GACrB,kBAAC,IAAD,cAGA,kBAAC,IAAD,CACEC,IAAKZ,EACLa,aAAW,QACXC,KAAK,QACLC,MAAOV,EACPW,SAxBU,SAACC,GACnB,IAAMb,EAAQa,EAAMC,OAAOH,MAC3BT,EAAgBF,GAChBL,EAAwB,CAACK,YAuBhBe,IAAOC,KAAI,SAAChB,GAAD,OACV,kBAAC,IAAD,CAAkBW,MAAOX,EAAOiB,IAAKjB,EAAOkB,QAAS,kBAAC,IAAD,MAAWC,MAAOnB,SAI7E,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQoB,QAAS5B,EAAS6B,MAAM,WAAhC,UAGA,kBAAC,IAAD,CAAQD,QAAS5B,EAAS6B,MAAM,WAAhC","file":"static/js/5.17bd417b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { themes } from '../../constants';\n\n\nexport default function ChangeTheme(props) {\n  const { open, onOpen, onClose, editorPreferencesStateAction } = props;\n  const { editorPreferences, updateEditorPreferences } = editorPreferencesStateAction;\n  const radioGroupRef = React.useRef(null);\n  const [currentTheme, setCurrentTheme] = useState(editorPreferences.theme);\n\n  const changeTheme = (event) => {\n    const theme = event.target.value;\n    setCurrentTheme(theme)\n    updateEditorPreferences({theme});\n  }\n\n  return (\n      <Dialog \n        fullWidth={true}\n        maxWidth=\"sm\"\n        open={open} \n        onOpen={onOpen} \n        onClose={onClose} \n        aria-labelledby=\"form-create-new-snippet\">\n        <DialogTitle id=\"form-snippet-file-name\">Change theme</DialogTitle>\n        <DialogContent dividers>\n          <DialogContentText>\n            Theme\n          </DialogContentText>\n          <RadioGroup\n            ref={radioGroupRef}\n            aria-label=\"Theme\"\n            name=\"theme\"\n            value={currentTheme}\n            onChange={changeTheme}\n          >\n            {themes.map((theme) => (\n              <FormControlLabel value={theme} key={theme} control={<Radio />} label={theme} />\n            ))}\n          </RadioGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={onClose} color=\"primary\" >\n            Okay\n          </Button>\n        </DialogActions>\n      </Dialog>\n  );\n}\n"],"sourceRoot":""}