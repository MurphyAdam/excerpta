{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-elm.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","ElmHighlightRules","keywordMapper","this","createKeywordMapper","escapeRe","smallRe","source","largeRe","idRe","$rules","start","token","regex","next","value","length","onMatch","currentState","stack","markdown","defaultToken","blockComment","push","docComment","string","stringGap","normalizeRules","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","nestable","$id"],"mappings":"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","file":"static/js/40.5dacc7be.chunk.js","sourcesContent":["ace.define(\"ace/mode/elm_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar ElmHighlightRules = function() {\n    var keywordMapper = this.createKeywordMapper({\n       \"keyword\": \"as|case|class|data|default|deriving|do|else|export|foreign|\" +\n            \"hiding|jsevent|if|import|in|infix|infixl|infixr|instance|let|\" +\n            \"module|newtype|of|open|then|type|where|_|port|\\u03BB\"\n    }, \"identifier\");\n    \n    var escapeRe = /\\\\(\\d+|['\"\\\\&trnbvf])/;\n    \n    var smallRe = /[a-z_]/.source;\n    var largeRe = /[A-Z]/.source;\n    var idRe = /[a-z_A-Z0-9']/.source;\n\n    this.$rules = {\n        start: [{\n            token: \"string.start\",\n            regex: '\"',\n            next: \"string\"\n        }, {\n            token: \"string.character\",\n            regex: \"'(?:\" + escapeRe.source + \"|.)'?\"\n        }, {\n            regex: /0(?:[xX][0-9A-Fa-f]+|[oO][0-7]+)|\\d+(\\.\\d+)?([eE][-+]?\\d*)?/,\n            token: \"constant.numeric\"\n        }, {\n            token: \"comment\",\n            regex: \"--.*\"\n        }, {\n            token : \"keyword\",\n            regex : /\\.\\.|\\||:|=|\\\\|\"|->|<-|\\u2192/\n        }, {\n            token : \"keyword.operator\",\n            regex : /[-!#$%&*+.\\/<=>?@\\\\^|~:\\u03BB\\u2192]+/\n        }, {\n            token : \"operator.punctuation\",\n            regex : /[,;`]/\n        }, {\n            regex : largeRe + idRe + \"+\\\\.?\",\n            token : function(value) {\n                if (value[value.length - 1] == \".\")\n                    return \"entity.name.function\"; \n                return \"constant.language\"; \n            }\n        }, {\n            regex : \"^\" + smallRe  + idRe + \"+\",\n            token : function(value) {\n                return \"constant.language\"; \n            }\n        }, {\n            token : keywordMapper,\n            regex : \"[\\\\w\\\\xff-\\\\u218e\\\\u2455-\\\\uffff]+\\\\b\"\n        }, {\n            regex: \"{-#?\",\n            token: \"comment.start\",\n            onMatch: function(value, currentState, stack) {\n                this.next = value.length == 2 ? \"blockComment\" : \"docComment\";\n                return this.token;\n            }\n        }, {\n            token: \"variable.language\",\n            regex: /\\[markdown\\|/,\n            next: \"markdown\"\n        }, {\n            token: \"paren.lparen\",\n            regex: /[\\[({]/ \n        }, {\n            token: \"paren.rparen\",\n            regex: /[\\])}]/\n        } ],\n        markdown: [{\n            regex: /\\|\\]/,\n            next: \"start\"\n        }, {\n            defaultToken : \"string\"\n        }],\n        blockComment: [{\n            regex: \"{-\",\n            token: \"comment.start\",\n            push: \"blockComment\"\n        }, {\n            regex: \"-}\",\n            token: \"comment.end\",\n            next: \"pop\"\n        }, {\n            defaultToken: \"comment\"\n        }],\n        docComment: [{\n            regex: \"{-\",\n            token: \"comment.start\",\n            push: \"docComment\"\n        }, {\n            regex: \"-}\",\n            token: \"comment.end\",\n            next: \"pop\" \n        }, {\n            defaultToken: \"doc.comment\"\n        }],\n        string: [{\n            token: \"constant.language.escape\",\n            regex: escapeRe\n        }, {\n            token: \"text\",\n            regex: /\\\\(\\s|$)/,\n            next: \"stringGap\"\n        }, {\n            token: \"string.end\",\n            regex: '\"',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        stringGap: [{\n            token: \"text\",\n            regex: /\\\\/,\n            next: \"string\"\n        }, {\n            token: \"error\",\n            regex: \"\",\n            next: \"start\"\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\noop.inherits(ElmHighlightRules, TextHighlightRules);\n\nexports.ElmHighlightRules = ElmHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/elm\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/elm_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HighlightRules = require(\"./elm_highlight_rules\").ElmHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"{-\", end: \"-}\", nestable: true};\n    this.$id = \"ace/mode/elm\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/elm\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}