{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-fsl.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","FSLHighlightRules","this","$rules","start","token","regex","push","next","defaultToken","comment","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","lineCommentStart","blockComment","$id","snippetFileId"],"mappings":"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","file":"static/js/45.e87588f0.chunk.js","sourcesContent":["ace.define(\"ace/mode/fsl_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar FSLHighlightRules = function() {\n\n    this.$rules = {\n        start: [{\n            token: \"punctuation.definition.comment.mn\",\n            regex: /\\/\\*/,\n            push: [{\n                token: \"punctuation.definition.comment.mn\",\n                regex: /\\*\\//,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.block.fsl\"\n            }]\n        }, {\n            token: \"comment.line.fsl\",\n            regex: /\\/\\//,\n            push: [{\n                token: \"comment.line.fsl\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.line.fsl\"\n            }]\n        }, {\n            token: \"entity.name.function\",\n            regex: /\\${/,\n            push: [{\n                token: \"entity.name.function\",\n                regex: /}/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"keyword.other\"\n            }],\n            comment: \"js outcalls\"\n        }, {\n            token: \"constant.numeric\",\n            regex: /[0-9]*\\.[0-9]*\\.[0-9]*/,\n            comment: \"semver\"\n        }, {\n            token: \"constant.language.fslLanguage\",\n            regex: \"(?:\"\n                + \"graph_layout|machine_name|machine_author|machine_license|machine_comment|machine_language\"\n                + \"|machine_version|machine_reference|npm_name|graph_layout|on_init|on_halt|on_end|on_terminate|on_finalize|on_transition\"\n                + \"|on_action|on_stochastic_action|on_legal|on_main|on_forced|on_validation|on_validation_failure|on_transition_refused|on_forced_transition_refused\"\n                + \"|on_action_refused|on_enter|on_exit|start_states|end_states|terminal_states|final_states|fsl_version\"\n                + \")\\\\s*:\"\n        }, {\n            token: \"keyword.control.transition.fslArrow\",\n            regex: /<->|<-|->|<=>|=>|<=|<~>|~>|<~|<-=>|<=->|<-~>|<~->|<=~>|<~=>/\n        }, {\n            token: \"constant.numeric.fslProbability\",\n            regex: /[0-9]+%/,\n            comment: \"edge probability annotation\"\n        }, {\n            token: \"constant.character.fslAction\",\n            regex: /\\'[^']*\\'/,\n            comment: \"action annotation\"\n        }, {\n            token: \"string.quoted.double.fslLabel.doublequoted\",\n            regex: /\\\"[^\"]*\\\"/,\n            comment: \"fsl label annotation\"\n        }, {\n            token: \"entity.name.tag.fslLabel.atom\",\n            regex: /[a-zA-Z0-9_.+&()#@!?,]/,\n            comment: \"fsl label annotation\"\n        }]\n    };\n\n    this.normalizeRules();\n};\n\nFSLHighlightRules.metaData = {\n    fileTypes: [\"fsl\", \"fsl_state\"],\n    name: \"FSL\",\n    scopeName: \"source.fsl\"\n};\n\n\noop.inherits(FSLHighlightRules, TextHighlightRules);\n\nexports.FSLHighlightRules = FSLHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/fsl\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/fsl_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar FSLHighlightRules = require(\"./fsl_highlight_rules\").FSLHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = FSLHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    this.$id = \"ace/mode/fsl\";\n    this.snippetFileId = \"ace/snippets/fsl\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/fsl\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}