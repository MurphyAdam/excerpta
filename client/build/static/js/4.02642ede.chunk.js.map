{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-alda.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","AldaHighlightRules","this","$rules","pitch","token","regex","next","timing","start","push","defaultToken","todo","include","normalizeRules","metaData","scopeName","fileTypes","name","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$id"],"mappings":"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","file":"static/js/4.02642ede.chunk.js","sourcesContent":["ace.define(\"ace/mode/alda_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n    \"use strict\";\n    \n    var oop = require(\"../lib/oop\");\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n    \n    var AldaHighlightRules = function() {\n    \n        this.$rules = {\n            pitch: [{\n                token: \"variable.parameter.operator.pitch.alda\",\n                regex: /(?:[+\\-]+|\\=)/\n            }, {\n                token: \"\",\n                regex: \"\",\n                next: \"timing\"\n            }],\n            timing: [{\n                token: \"string.quoted.operator.timing.alda\",\n                regex: /\\d+(?:s|ms)?/\n            }, {\n                token: \"\",\n                regex: \"\",\n                next: \"start\"\n            }],\n            start: [{\n                token: [\n                    \"constant.language.instrument.alda\",\n                    \"constant.language.instrument.alda\",\n                    \"meta.part.call.alda\",\n                    \"storage.type.nickname.alda\",\n                    \"meta.part.call.alda\"\n                ],\n                regex: /^([a-zA-Z]{2}[\\w\\-+\\'()]*)((?:\\s*\\/\\s*[a-zA-Z]{2}[\\w\\-+\\'()]*)*)(?:(\\s*)(\\\"[a-zA-Z]{2}[\\w\\-+\\'()]*\\\"))?(\\s*:)/\n            }, {\n                token: [\n                    \"text\",\n                    \"entity.other.inherited-class.voice.alda\",\n                    \"text\"\n                ],\n                regex: /^(\\s*)(V\\d+)(:)/\n            }, {\n                token: \"comment.line.number-sign.alda\",\n                regex: /#.*$/\n            }, {\n                token: \"entity.name.function.pipe.measure.alda\",\n                regex: /\\|/\n            }, {\n                token: \"comment.block.inline.alda\",\n                regex: /\\(comment\\b/,\n                push: [{\n                    token: \"comment.block.inline.alda\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    defaultToken: \"comment.block.inline.alda\"\n                }]\n            }, {\n                token: \"entity.name.function.marker.alda\",\n                regex: /%[a-zA-Z]{2}[\\w\\-+\\'()]*/\n            }, {\n                token: \"entity.name.function.at-marker.alda\",\n                regex: /@[a-zA-Z]{2}[\\w\\-+\\'()]*/\n            }, {\n                token: \"keyword.operator.octave-change.alda\",\n                regex: /\\bo\\d+\\b/\n            }, {\n                token: \"keyword.operator.octave-shift.alda\",\n                regex: /[><]/\n            }, {\n                token: \"keyword.operator.repeat.alda\",\n                regex: /\\*\\s*\\d+/\n            }, {\n                token: \"string.quoted.operator.timing.alda\",\n                regex: /[.]|r\\d*(?:s|ms)?/\n            },{\n                token: \"text\",\n                regex: /([cdefgab])/,\n                next: \"pitch\"\n            }, {\n                token: \"string.quoted.operator.timing.alda\",\n                regex: /~/,\n                next: \"timing\"\n            }, {\n                token: \"punctuation.section.embedded.cram.alda\",\n                regex: /\\}/,\n                next: \"timing\"\n            }, {\n                token: \"constant.numeric.subchord.alda\",\n                regex: /\\//\n            }, {\n                todo: {\n                    token: \"punctuation.section.embedded.cram.alda\",\n                    regex: /\\{/,\n                    push: [{\n                        token: \"punctuation.section.embedded.cram.alda\",\n                        regex: /\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"$self\"\n                    }]\n                }\n            }, {\n                todo: {\n                    token: \"keyword.control.sequence.alda\",\n                    regex: /\\[/,\n                    push: [{\n                        token: \"keyword.control.sequence.alda\",\n                        regex: /\\]/,\n                        next: \"pop\"\n                    }, {\n                        include: \"$self\"\n                    }]\n                }\n            }, {\n                token: \"meta.inline.clojure.alda\",\n                regex: /\\(/,\n                push: [{\n                    token: \"meta.inline.clojure.alda\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"source.clojure\"\n                }, {\n                    defaultToken: \"meta.inline.clojure.alda\"\n                }]\n            }]\n        };\n        \n        this.normalizeRules();\n    };\n    \n    AldaHighlightRules.metaData = {\n        scopeName: \"source.alda\",\n        fileTypes: [\"alda\"],\n        name: \"Alda\"\n    };\n    \n    \n    oop.inherits(AldaHighlightRules, TextHighlightRules);\n    \n    exports.AldaHighlightRules = AldaHighlightRules;\n    });\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/alda\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/alda_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar AldaHighlightRules = require(\"./alda_highlight_rules\").AldaHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = AldaHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.$id = \"ace/mode/alda\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/alda\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}