{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-prisma.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","PrismaHighlightRules","this","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","lineCommentStart","$id"],"mappings":"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","file":"static/js/116.61a62779.chunk.js","sourcesContent":["ace.define(\"ace/mode/prisma_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PrismaHighlightRules = function() {\n\n    this.$rules = {\n        start: [{\n            include: \"#triple_comment\"\n        }, {\n            include: \"#double_comment\"\n        }, {\n            include: \"#model_block_definition\"\n        }, {\n            include: \"#config_block_definition\"\n        }, {\n            include: \"#enum_block_definition\"\n        }, {\n            include: \"#type_definition\"\n        }],\n        \"#model_block_definition\": [{\n            token: [\n                \"source.prisma.embedded.source\",\n                \"storage.type.model.prisma\",\n                \"source.prisma.embedded.source\",\n                \"entity.name.type.model.prisma\",\n                \"source.prisma.embedded.source\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /^(\\s*)(model|type)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#field_definition\"\n            }, {\n                defaultToken: \"source.prisma.embedded.source\"\n            }]\n        }],\n        \"#enum_block_definition\": [{\n            token: [\n                \"source.prisma.embedded.source\",\n                \"storage.type.enum.prisma\",\n                \"source.prisma.embedded.source\",\n                \"entity.name.type.enum.prisma\",\n                \"source.prisma.embedded.source\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /^(\\s*)(enum)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#enum_value_definition\"\n            }, {\n                defaultToken: \"source.prisma.embedded.source\"\n            }]\n        }],\n        \"#config_block_definition\": [{\n            token: [\n                \"source.prisma.embedded.source\",\n                \"storage.type.config.prisma\",\n                \"source.prisma.embedded.source\",\n                \"entity.name.type.config.prisma\",\n                \"source.prisma.embedded.source\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /^(\\s*)(generator|datasource)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n            push: [{\n                token: \"source.prisma.embedded.source\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#assignment\"\n            }, {\n                defaultToken: \"source.prisma.embedded.source\"\n            }]\n        }],\n        \"#assignment\": [{\n            token: [\n                \"text\",\n                \"variable.other.assignment.prisma\",\n                \"text\",\n                \"keyword.operator.terraform\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(\\w+)(\\s*)(=)(\\s*)/,\n            push: [{\n                token: \"text\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                include: \"#double_comment_inline\"\n            }]\n        }],\n        \"#field_definition\": [{\n            token: [\n                \"text\",\n                \"variable.other.assignment.prisma\",\n                \"invalid.illegal.colon.prisma\",\n                \"text\",\n                \"support.type.primitive.prisma\",\n                \"keyword.operator.list_type.prisma\",\n                \"keyword.operator.optional_type.prisma\",\n                \"invalid.illegal.required_type.prisma\"\n            ],\n            regex: /^(\\s*)(\\w+)((?:\\s*:)?)(\\s+)(\\w+)((?:\\[\\])?)((?:\\?)?)((?:\\!)?)/\n        }, {\n            include: \"#attribute_with_arguments\"\n        }, {\n            include: \"#attribute\"\n        }],\n        \"#type_definition\": [{\n            token: [\n                \"text\",\n                \"storage.type.type.prisma\",\n                \"text\",\n                \"entity.name.type.type.prisma\",\n                \"text\",\n                \"support.type.primitive.prisma\"\n            ],\n            regex: /^(\\s*)(type)(\\s+)(\\w+)(\\s*=\\s*)(\\w+)/\n        }, {\n            include: \"#attribute_with_arguments\"\n        }, {\n            include: \"#attribute\"\n        }],\n        \"#enum_value_definition\": [{\n            token: [\n                \"text\",\n                \"variable.other.assignment.prisma\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(\\w+)(\\s*$)/\n        }, {\n            include: \"#attribute_with_arguments\"\n        }, {\n            include: \"#attribute\"\n        }],\n        \"#attribute_with_arguments\": [{\n            token: [\n                \"entity.name.function.attribute.prisma\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /(@@?[\\w\\.]+)(\\()/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#named_argument\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.prisma.attribute.with_arguments\"\n            }]\n        }],\n        \"#attribute\": [{\n            token: \"entity.name.function.attribute.prisma\",\n            regex: /@@?[\\w\\.]+/\n        }],\n        \"#array\": [{\n            token: \"source.prisma.array\",\n            regex: /\\[/,\n            push: [{\n                token: \"source.prisma.array\",\n                regex: /\\]/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.prisma.array\"\n            }]\n        }],\n        \"#value\": [{\n            include: \"#array\"\n        }, {\n            include: \"#functional\"\n        }, {\n            include: \"#literal\"\n        }],\n        \"#functional\": [{\n            token: [\n                \"support.function.functional.prisma\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /(\\w+)(\\()/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.prisma.functional\"\n            }]\n        }],\n        \"#literal\": [{\n            include: \"#boolean\"\n        }, {\n            include: \"#number\"\n        }, {\n            include: \"#double_quoted_string\"\n        }, {\n            include: \"#identifier\"\n        }],\n        \"#identifier\": [{\n            token: \"support.constant.constant.prisma\",\n            regex: /\\b(?:\\w)+\\b/\n        }],\n        \"#map_key\": [{\n            token: [\n                \"variable.parameter.key.prisma\",\n                \"text\",\n                \"punctuation.definition.separator.key-value.prisma\",\n                \"text\"\n            ],\n            regex: /(\\w+)(\\s*)(:)(\\s*)/\n        }],\n        \"#named_argument\": [{\n            include: \"#map_key\"\n        }, {\n            include: \"#value\"\n        }],\n        \"#triple_comment\": [{\n            token: \"comment.prisma\",\n            regex: /\\/\\/\\//,\n            push: [{\n                token: \"comment.prisma\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.prisma\"\n            }]\n        }],\n        \"#double_comment\": [{\n            token: \"comment.prisma\",\n            regex: /\\/\\//,\n            push: [{\n                token: \"comment.prisma\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.prisma\"\n            }]\n        }],\n        \"#double_comment_inline\": [{\n            token: \"comment.prisma\",\n            regex: /\\/\\/[^$]*/\n        }],\n        \"#boolean\": [{\n            token: \"constant.language.boolean.prisma\",\n            regex: /\\b(?:true|false)\\b/\n        }],\n        \"#number\": [{\n            token: \"constant.numeric.prisma\",\n            regex: /(?:0(?:x|X)[0-9a-fA-F]*|(?:\\+|-)?\\b(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDdg]|UL|ul)?\\b/\n        }],\n        \"#double_quoted_string\": [{\n            token: \"string.quoted.double.start.prisma\",\n            regex: /\"/,\n            push: [{\n                token: \"string.quoted.double.end.prisma\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                include: \"#string_interpolation\"\n            }, {\n                token: \"string.quoted.double.prisma\",\n                regex: /[\\w\\-\\/\\._\\\\%@:\\?=]+/\n            }, {\n                defaultToken: \"unnamed\"\n            }]\n        }],\n        \"#string_interpolation\": [{\n            token: \"keyword.control.interpolation.start.prisma\",\n            regex: /\\$\\{/,\n            push: [{\n                token: \"keyword.control.interpolation.end.prisma\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.tag.embedded.source.prisma\"\n            }]\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\nPrismaHighlightRules.metaData = {\n    name: \"Prisma\",\n    scopeName: \"source.prisma\"\n};\n\n\noop.inherits(PrismaHighlightRules, TextHighlightRules);\n\nexports.PrismaHighlightRules = PrismaHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/prisma\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prisma_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PrismaHighlightRules = require(\"./prisma_highlight_rules\").PrismaHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = PrismaHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/prisma\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/prisma\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}