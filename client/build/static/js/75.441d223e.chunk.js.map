{"version":3,"sources":["../node_modules/ace-builds/src-noconflict/mode-jsx.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","lang","JsxHighlightRules","keywords","arrayToMap","split","buildinConstants","reserved","value","hasOwnProperty","test","embedRules","Range","MatchingBraceOutdent","checkOutdent","line","input","autoOutdent","doc","row","match","getLine","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokens","getTokenizer","getLineTokens","type","$id"],"mappings":"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","file":"static/js/75.441d223e.chunk.js","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/jsx_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\nvar oop = require(\"../lib/oop\");\nvar lang = require(\"../lib/lang\");\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar JsxHighlightRules = function() {\n    var keywords = lang.arrayToMap(\n        (\"break|do|instanceof|typeof|case|else|new|var|catch|finally|return|void|continue|for|switch|default|while|function|this|\" +\n         \"if|throw|\" +\n         \"delete|in|try|\" +\n         \"class|extends|super|import|from|into|implements|interface|static|mixin|override|abstract|final|\" +\n         \"number|int|string|boolean|variant|\" +\n         \"log|assert\").split(\"|\")\n    );\n    \n    var buildinConstants = lang.arrayToMap(\n        (\"null|true|false|NaN|Infinity|__FILE__|__LINE__|undefined\").split(\"|\")\n    );\n    \n    var reserved = lang.arrayToMap(\n        (\"debugger|with|\" +\n         \"const|export|\" +\n         \"let|private|public|yield|protected|\" +\n         \"extern|native|as|operator|__fake__|__readonly__\").split(\"|\")\n    );\n    \n    var identifierRe = \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\";\n    \n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"\\\\/\\\\/.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"comment\"\n            }, {\n                token : \"string.regexp\",\n                regex : \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\n            }, {\n                token : \"string\", // single line\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"string\", // single line\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(?:true|false)\\\\b\"\n            }, {\n                token : [\n                    \"storage.type\",\n                    \"text\",\n                    \"entity.name.function\"\n                ],\n                regex : \"(function)(\\\\s+)(\" + identifierRe + \")\"\n            }, {\n                token : function(value) {\n                    if (value == \"this\")\n                        return \"variable.language\";\n                    else if (value == \"function\")\n                        return \"storage.type\";\n                    else if (keywords.hasOwnProperty(value) || reserved.hasOwnProperty(value))\n                        return \"keyword\";\n                    else if (buildinConstants.hasOwnProperty(value))\n                        return \"constant.language\";\n                    else if (/^_?[A-Z][a-zA-Z0-9_]*$/.test(value))\n                        return \"language.support.class\";\n                    else\n                        return \"identifier\";\n                },\n                regex : identifierRe\n            }, {\n                token : \"keyword.operator\",\n                regex : \"!|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\n            }, {\n                token : \"punctuation.operator\",\n                regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({<]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}>]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken : \"comment\"\n            }\n        ]\n    };\n    \n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n};\n\noop.inherits(JsxHighlightRules, TextHighlightRules);\n\nexports.JsxHighlightRules = JsxHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/jsx\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/jsx_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar JsxHighlightRules = require(\"./jsx_highlight_rules\").JsxHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nfunction Mode() {\n    this.HighlightRules = JsxHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n}\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/jsx\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/jsx\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"sourceRoot":""}